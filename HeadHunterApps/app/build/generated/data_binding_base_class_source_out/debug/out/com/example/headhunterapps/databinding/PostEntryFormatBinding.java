// Generated by view binder compiler. Do not edit!
package com.example.headhunterapps.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.headhunterapps.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class PostEntryFormatBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final CardView cardViewEntry;

  @NonNull
  public final ImageView imageCircle;

  @NonNull
  public final TextView workButton;

  @NonNull
  public final TextView workNear;

  private PostEntryFormatBinding(@NonNull ConstraintLayout rootView,
      @NonNull CardView cardViewEntry, @NonNull ImageView imageCircle, @NonNull TextView workButton,
      @NonNull TextView workNear) {
    this.rootView = rootView;
    this.cardViewEntry = cardViewEntry;
    this.imageCircle = imageCircle;
    this.workButton = workButton;
    this.workNear = workNear;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static PostEntryFormatBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static PostEntryFormatBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.post_entry_format, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static PostEntryFormatBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cardViewEntry;
      CardView cardViewEntry = ViewBindings.findChildViewById(rootView, id);
      if (cardViewEntry == null) {
        break missingId;
      }

      id = R.id.imageCircle;
      ImageView imageCircle = ViewBindings.findChildViewById(rootView, id);
      if (imageCircle == null) {
        break missingId;
      }

      id = R.id.workButton;
      TextView workButton = ViewBindings.findChildViewById(rootView, id);
      if (workButton == null) {
        break missingId;
      }

      id = R.id.workNear;
      TextView workNear = ViewBindings.findChildViewById(rootView, id);
      if (workNear == null) {
        break missingId;
      }

      return new PostEntryFormatBinding((ConstraintLayout) rootView, cardViewEntry, imageCircle,
          workButton, workNear);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
